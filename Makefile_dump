/*
//The below is a demo of the first level of making a Makefile (i.e.: a lot of redundancies)
all: ft_isalpha.o ft_isdigit.o ft_isalnum.o ft_isascii.o ft_isprint.o
		cc main.c ft_isalpha.o ft_isdigit.o ft_isalnum.o ft_isascii.o ft_isprint.o 

ft_isalpha.o: ft_isalpha.c
		cc -c ft_isalpha.c

ft_isdigit.o: ft_isdigit.c
		cc -c ft_isdigit.c

ft_isalnum.o: ft_isalnum.c
		cc -c ft_isalnum.c

ft_isascii.o: ft_isascii.c
		cc -c ft_isascii.c

ft_isprint.o: ft_isprint.c
		cc -c ft_isprint.c
*/

/*
//The below is a demo of the second level of making a Makefile (i.e.: less redundancy)
OBJS = ft_isalpha.o ft_isdigit.o ft_isalnum.o ft_isascii.o ft_isprint.o # Dependency list of the 'all' rule

all: $(OBJS)
		cc main.c $(OBJS)

%.o: %.c
		cc -c $<

clean:
		rm -rf $(OBJS)

fclean:
		rm -rf libft.a

re: fclean
		$(MAKE) all
*/

/*
MY_VAR =  this is a string

MY_OTHER_VAR = hello $(MY_VAR)

MY_OTHER_VAR += "Bye !"

NAME = my_prog

MY_SOURCES = 	ft_putchar.c \
		ft_putstr.c \
		main.c

MY_OBJECTS = $(MY_SOURCES: .c = .o)

CFLAGS += -Wall

CUR_DIR = $(shell pwd)

$(NAME):	$(MY_OBJECTS)
		cc -o $(NAME) $(MY_OBJECTS)

a_prog:	ft_putchar.o main.o
	cc -o this prog ft_putchar.o main.o

my_rule:	sub_rule
		echo I will compile my files $(MY_SOURCES)

sub_rule:
		echo This is my rule, in $(CUR_DIR)

all:

clean:

fclean:

re:

bonus:
*/

$(NAME): 

%.o: %.c

clean:

fclean:

re:
